Requirements:
	Smart contract (deployed to ropsten)
	client-side app (trying Qwik again)
	decentralized storage
	unit tests (85%+ coverage)

Optional:
	use oracles to pass data
	use built-in wallet (client wallet)
	use server-side logic

===========================

Marketplace App
	3 types of users:
		Visitors can:
			view sellers
			view items
			(view items by seller)
		Buyers can:
			(All above, and)
			buy items using metamask
		Sellers can:
			(all the above, and)
			register item for sale

Frontend:
	Visitors are people without Metamask linked
	Buyers are people with metamask linked
	Sellers only need an address, so they could be visitors that choose to sell





TODO as of sept 18th:

	UX: (DONE)
		Browse / ItemPreview:
			- stop showing error-state as items load;

	Styling: 
		Store page:
			- Fix ItemPreviews are squished from sides
		Notifications:
(DONE)			- Find better location for notifications??
(DONE)			- Center notifications like the Create Notification button
(DONE)			- ("Create Notification" text color lighten, button styling? )
		Browse:
			- Fix wide item when it is alone on the row
		Create: (DONE)
(DONE)			- Lighten label text color
	
	Optimizations:
		Create / Details / Store pages:
			- Make sure they do not render until they are needed, so the JS doesn't get loaded eagerly
			- How to do this? it might already...
		Modals:
(DONE)			- Make a container modal that fetches the modal contents? 
			- Or nvm, prefetch should already not download the component until needed
		
	Testing:
		Test Delete, Purchase, some more: 
(DONE)			- should close details page when done
		
(done)		Bug: On first refresh: 330px screens, the Connect banner flows over the header. The header could be expanded 89,5 + 8px + 8px so bg flows around.
		And no blue is on the left because the connect is too big, maybe smaller fonts on smaller screens for (everything? but at least) Browse Marketplace and Connect banner
		
		Error: Promise resolver not defined. from details page on first load. (not showing, just appearing in the html)
		Details page does NOT work on 330px screens, it goes off the right side of the page and has a large left margin. small screens should only have a low margin.
		Also details page wrapper should have a top padding accounting for the header so it stays below the header
		And it does not expand downward on long screens, because it's set at 800px 
		image, address (and all the rows) are overflowing the right side
		Add An Item should be smaller on small screens; and your address disappears from the header, so could display it elsewhere. is metamask 
		small screen, one column is not centered
		address: make it smaller and just below the qwik Marketplace?

		
		So: details:
(done)(done)(done)(done)(done)(done)(done)(done)(done)			less left margin, top margin starts below the header, expand height for tall phones, 


		STORE page:
(DONE)			Small screens should shrink to single column!! seems to change, but at the wrong point
(DONE)				right column gets cut off
(done)				Address gets cut off! Smaller text on small screens
(meh)					Do we need to pass in class to modal so the store can have smaller header text?
(DONE)			Lots of blue on store page, maybe change it up?

		Create tab:
(DONE)			maybe remove the \/;
(DONE)			want it smaller... eh.

		header:
(DONE)	  	prevent address click on small screens? it overflows...




TODO (Oct 8th):
	Create sends form data and photo to the server. 
		Server can receive file when new file is chosen, while waiting to upload it to IPFS until the "Add Item" button is clicked.
	On submit, the latest photo is uploaded to IPFS, all photos are deleted from the file system, and then the rest of the item data is uploaded to IPFS. Now it's ready for the smart contract, so it can be added on the server or the client.

	This way, at least we have a persistent server to keep our IPFS data for a while (until it upgrades). 

	Bonus: add server-side auto-pinning on IPFS for any files the client sees that are not yet pinned on the server.
	Story: I want to upgrade the server while keeping all of the previous data.
	How: Run a client and get all items in the client IPFS node. Then upgrade and restart the server. Now (need to make a request to the server somehow somewhen?) the client can post to the server (when?? On create new item?) and post all IPFS hash data for the client items, so the server can pin them all again.
	Or? Some handshake: When client refetches items, some check to update server items?????? 